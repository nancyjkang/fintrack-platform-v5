#!/usr/bin/env sh

echo "🔍 FinTrack v5 Pre-commit checks starting..."


# Basic code quality checks for v5
echo "🔍 Running basic code quality checks..."

echo "🔍 Checking CSS syntax..."

# Check CSS syntax for staged CSS files
CSS_FILES=$(git diff --cached --name-only | grep -E '\.(css|scss|sass)$' 2>/dev/null || true)
if [ -n "$CSS_FILES" ]; then
  for css_file in $CSS_FILES; do
    if [ -f "$css_file" ]; then
      # Check for common CSS syntax errors
      if grep -q "^[[:space:]]*\.[[:space:]]*$" "$css_file"; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Found stray dot character on line(s):"
        grep -n "^[[:space:]]*\.[[:space:]]*$" "$css_file" | sed 's/^/     /'
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi

      # Check for stray single characters or incomplete CSS
      if grep -q "^[[:space:]]*[a-zA-Z][[:space:]]*$" "$css_file"; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Found stray single character(s) on line(s):"
        grep -n "^[[:space:]]*[a-zA-Z][[:space:]]*$" "$css_file" | sed 's/^/     /'
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi

      # Check for unmatched braces
      open_braces=$(grep -o '{' "$css_file" | wc -l)
      close_braces=$(grep -o '}' "$css_file" | wc -l)
      if [ "$open_braces" -ne "$close_braces" ]; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Unmatched braces: $open_braces opening vs $close_braces closing"
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi

      # Check for missing semicolons in property declarations
      if grep -q "^[[:space:]]*[a-zA-Z-][a-zA-Z0-9_-]*[[:space:]]*:[[:space:]]*[^;{]*[[:space:]]*$" "$css_file"; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Found property declarations without semicolons:"
        grep -n "^[[:space:]]*[a-zA-Z-][a-zA-Z0-9_-]*[[:space:]]*:[[:space:]]*[^;{]*[[:space:]]*$" "$css_file" | sed 's/^/     /'
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi
    fi
  done
  echo "✅ CSS syntax validation passed"
fi

# CRITICAL: TypeScript compilation check
echo "🔍 Checking TypeScript compilation..."
npx tsc --noEmit
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: TypeScript compilation failed"
  echo "💡 Fix TypeScript errors before committing"
  exit 1
fi
echo "✅ TypeScript compilation passed"

# CRITICAL: Date handling ESLint checks (prevent direct Date() usage)
echo "🔍 Checking date handling compliance..."
npx eslint --no-eslintrc --config '{"extends":[],"rules":{"no-restricted-globals":["error",{"name":"Date","message":"❌ Global Date constructor is prohibited. Import and use date utilities from @/lib/utils/date-utils instead."}],"no-restricted-syntax":["error",{"selector":"NewExpression[callee.name=\"Date\"]","message":"❌ Direct new Date() usage is prohibited. Use date utilities from @/lib/utils/date-utils instead. See docs/architecture/date-handling-best-practices.md"}]}}' --format=compact src/ 2>/dev/null
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: Date handling violations found"
  echo "💡 Use date utilities from @/lib/utils/date-utils instead of direct Date() usage"
  echo "💡 See docs/architecture/date-handling-best-practices.md for guidance"
  exit 1
fi
echo "✅ Date handling compliance passed"

# Build check moved to pre-push hook for faster commits

# CRITICAL: Test suite check (ensures all tests pass)
echo "🔍 Running test suite..."
npm run test > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: Test suite failed"
  echo "💡 Run 'npm run test' to see detailed test failures"
  echo "💡 Fix failing tests before committing"
  exit 1
fi
echo "✅ Test suite passed"

echo "✅ All pre-commit checks passed!"
