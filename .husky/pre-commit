#!/usr/bin/env sh

echo "🔍 FinTrack v4 Pre-commit checks starting..."

# Quick code cleanup check (only staged files - very fast!)
# TODO: Fix cleanup script infinite loop issue and re-enable
# echo "🧹 Checking for unused code in staged files..."
# node scripts/cleanup-unused-code.js
# if [ $? -ne 0 ]; then
#   echo "🚫 COMMIT REJECTED: Code cleanup issues found"
#   echo "💡 Run 'node scripts/cleanup-unused-code.js --fix' to auto-fix, or fix manually"
#   exit 1
# fi

# Run dependency checks (fast pre-commit checks only)
echo "🔍 Checking dependencies..."
node scripts/check-dependencies.js
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: Dependency checks failed"
  exit 1
fi


# Check for new Date() usage in staged files (excluding date utility files and tests)
ALL_STAGED_FILES=$(git diff --cached --name-only | grep -E '\.(tsx|ts|jsx|js)$' 2>/dev/null || true)

if [ -n "$ALL_STAGED_FILES" ] && echo "$ALL_STAGED_FILES" | xargs grep -l "new Date()" 2>/dev/null | grep -v "\.test\." | grep -v "\.spec\." | grep -v "date-utils.ts" | grep -v "v4-date-utils.ts" | grep -v "generate-release-docs.js"; then
  echo "❌ new Date() detected in staged files! Please use getCurrentDate() or other utility functions instead."
  echo "   Found in:"
  echo "$ALL_STAGED_FILES" | xargs grep -l "new Date()" 2>/dev/null | grep -v "\.test\." | grep -v "\.spec\." | grep -v "date-utils.ts" | grep -v "v4-date-utils.ts" | grep -v "generate-release-docs.js" | while read file; do
    echo "  📁 $file"
    echo "     Lines with new Date():"
    grep -n "new Date()" "$file" | sed 's/^/       /'
  done
  echo ""
  echo "💡 Use getCurrentDate() from @/lib/utils/v4-date-utils instead of new Date()"
  exit 1
fi

echo "🔍 Scanning for improper date handling..."

# Check for .toISOString() usage outside of date utility files and test files
STAGED_FILES=$(git diff --cached --name-only | grep -E '\.(tsx|ts|jsx|js)$' | grep -v '__tests__\|\.test\.\|\.spec\.\|date-utils\|v4-date-utils' 2>/dev/null || true)
if [ -n "$STAGED_FILES" ] && echo "$STAGED_FILES" | xargs grep -l '\.toISOString()' 2>/dev/null; then
  echo "❌ ERROR: .toISOString() detected in non-date-utility files!"
  echo ""
  echo "The following files contain .toISOString() usage:"
  echo "$STAGED_FILES" | xargs grep -l '\.toISOString()' 2>/dev/null | while read file; do
    echo "  📁 $file"
    echo "     Lines with .toISOString():"
    grep -n '\.toISOString()' "$file" | sed 's/^/       /'
  done
  echo ""
  echo "🚫 COMMIT REJECTED: Please use date utility functions instead of .toISOString()"
  echo "💡 Use the date utility functions from @/lib/utils/v4-date-utils"
  echo "   Examples:"
  echo "   - Use getCurrentDate() instead of new Date().toISOString().split('T')[0]"
  echo "   - Use formatDateForDisplay(date) instead of new Date(date).toLocaleDateString()"
  echo "   - All date operations should use string-based dates (YYYY-MM-DD format)"
  exit 1
fi

# Check for .toLocaleDateString() usage outside of date utility files and test files
if [ -n "$STAGED_FILES" ] && echo "$STAGED_FILES" | xargs grep -l '\.toLocaleDateString()' 2>/dev/null; then
  echo "❌ ERROR: .toLocaleDateString() detected in non-date-utility files!"
  echo ""
  echo "The following files contain .toLocaleDateString() usage:"
  echo "$STAGED_FILES" | xargs grep -l '\.toLocaleDateString()' 2>/dev/null | while read file; do
    echo "  📁 $file"
    echo "     Lines with .toLocaleDateString():"
    grep -n '\.toLocaleDateString()' "$file" | sed 's/^/       /'
  done
  echo ""
  echo "🚫 COMMIT REJECTED: Please use formatDateForDisplay() from date utilities instead of .toLocaleDateString()"
  echo "💡 This prevents timezone display bugs in v4"
  echo "   Use: formatDateForDisplay(dateStr) instead of new Date(dateStr).toLocaleDateString()"
  exit 1
fi

echo "✅ No improper date handling detected."

echo "🔍 Checking CSS syntax..."

# Check CSS syntax for staged CSS files
CSS_FILES=$(git diff --cached --name-only | grep -E '\.(css|scss|sass)$' 2>/dev/null || true)
if [ -n "$CSS_FILES" ]; then
  for css_file in $CSS_FILES; do
    if [ -f "$css_file" ]; then
      # Check for common CSS syntax errors
      if grep -q "^[[:space:]]*\.[[:space:]]*$" "$css_file"; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Found stray dot character on line(s):"
        grep -n "^[[:space:]]*\.[[:space:]]*$" "$css_file" | sed 's/^/     /'
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi

      # Check for stray single characters or incomplete CSS
      if grep -q "^[[:space:]]*[a-zA-Z][[:space:]]*$" "$css_file"; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Found stray single character(s) on line(s):"
        grep -n "^[[:space:]]*[a-zA-Z][[:space:]]*$" "$css_file" | sed 's/^/     /'
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi

      # Check for unmatched braces
      open_braces=$(grep -o '{' "$css_file" | wc -l)
      close_braces=$(grep -o '}' "$css_file" | wc -l)
      if [ "$open_braces" -ne "$close_braces" ]; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Unmatched braces: $open_braces opening vs $close_braces closing"
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi

      # Check for missing semicolons in property declarations
      if grep -q "^[[:space:]]*[a-zA-Z-][a-zA-Z0-9_-]*[[:space:]]*:[[:space:]]*[^;{]*[[:space:]]*$" "$css_file"; then
        echo "❌ CSS syntax error detected in $css_file!"
        echo "   Found property declarations without semicolons:"
        grep -n "^[[:space:]]*[a-zA-Z-][a-zA-Z0-9_-]*[[:space:]]*:[[:space:]]*[^;{]*[[:space:]]*$" "$css_file" | sed 's/^/     /'
        echo ""
        echo "🚫 COMMIT REJECTED: Please fix CSS syntax errors before committing"
        exit 1
      fi
    fi
  done
  echo "✅ CSS syntax validation passed"
fi

# CRITICAL: TypeScript compilation check
echo "🔍 Checking TypeScript compilation..."
npx tsc --noEmit
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: TypeScript compilation failed"
  echo "💡 Fix TypeScript errors before committing"
  exit 1
fi
echo "✅ TypeScript compilation passed"

# CRITICAL: Build check (ensures production build works)
echo "🔍 Checking production build..."
npm run build > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: Production build failed"
  echo "💡 Run 'npm run build' to see detailed errors"
  exit 1
fi
echo "✅ Production build passed"

# CRITICAL: Test suite check (ensures all tests pass)
echo "🔍 Running test suite..."
npm run test > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "🚫 COMMIT REJECTED: Test suite failed"
  echo "💡 Run 'npm run test' to see detailed test failures"
  echo "💡 Fix failing tests before committing"
  exit 1
fi
echo "✅ Test suite passed"

echo "✅ All pre-commit checks passed!"
npm run lint && npm run type-check
