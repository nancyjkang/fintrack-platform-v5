generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

// Disable prepared statements for pooled connections
// This prevents "prepared statement already exists" errors with Supabase Transaction Pooler

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  name        String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  memberships Membership[]

  @@map("users")
}

model Tenant {
  id              String                 @id @default(cuid())
  name            String
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt
  balance_anchors AccountBalanceAnchor[]
  accounts        Account[]
  categories      Category[]
  financial_cube  FinancialCube[]
  memberships     Membership[]
  spending_goals  SpendingGoal[]
  transactions    Transaction[]

  @@map("tenants")
}

model Membership {
  id        String @id @default(cuid())
  user_id   String
  tenant_id String
  role      String @default("member")
  tenant    Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, tenant_id])
  @@map("memberships")
}

model Account {
  id                 Int                    @id @default(autoincrement())
  tenant_id          String
  name               String
  type               String
  balance            Decimal                @db.Decimal(12, 2)
  balance_date       DateTime
  color              String
  is_active          Boolean                @default(true)
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  net_worth_category String
  balance_anchors    AccountBalanceAnchor[]
  tenant             Tenant                 @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  financial_cube     FinancialCube[]
  transactions       Transaction[]

  @@unique([tenant_id, name])
  @@map("accounts")
}

model Category {
  id             Int             @id @default(autoincrement())
  tenant_id      String
  name           String
  type           String
  color          String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  tenant         Tenant          @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  financial_cube FinancialCube[]
  transactions   Transaction[]

  @@unique([tenant_id, name, type])
  @@map("categories")
}

model Transaction {
  id           Int       @id @default(autoincrement())
  tenant_id    String
  account_id   Int
  category_id  Int?
  amount       Decimal   @db.Decimal(12, 2)
  description  String
  date         DateTime
  type         String
  is_recurring Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  account      Account   @relation(fields: [account_id], references: [id], onDelete: Cascade)
  category     Category? @relation(fields: [category_id], references: [id])
  tenant       Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model AccountBalanceAnchor {
  id          Int      @id @default(autoincrement())
  tenant_id   String
  account_id  Int
  balance     Decimal  @db.Decimal(12, 2)
  anchor_date DateTime
  description String?
  created_at  DateTime @default(now())
  account     Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("account_balance_anchors")
}

model SpendingGoal {
  id                        String   @id @default(cuid())
  tenant_id                 String
  name                      String
  goal_type                 String
  target_amount             Decimal  @db.Decimal(12, 2)
  timeframe                 String
  start_date                DateTime
  end_date                  DateTime
  status                    String   @default("active")
  alert_warning_threshold   Int      @default(80)
  alert_critical_threshold  Int      @default(90)
  criteria_category_ids     Int[]    @default([])
  criteria_account_ids      Int[]    @default([])
  criteria_recurring        Boolean?
  criteria_transaction_type String
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  tenant                    Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("spending_goals")
}

model FinancialCube {
  id                Int       @id @default(autoincrement())
  tenant_id         String
  period_type       String
  period_start      DateTime  @db.Date
  period_end        DateTime  @db.Date
  transaction_type  String
  category_id       Int?
  category_name     String
  account_id        Int
  account_name      String
  is_recurring      Boolean   @default(false)
  total_amount      Decimal   @default(0.00) @db.Decimal(12, 2)
  transaction_count Int       @default(0)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  account           Account   @relation(fields: [account_id], references: [id], onDelete: Cascade)
  category          Category? @relation(fields: [category_id], references: [id])
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@unique([tenant_id, period_type, period_start, transaction_type, category_id, account_id, is_recurring])
  @@index([tenant_id, category_id, period_start])
  @@index([tenant_id, account_id, period_start])
  @@index([tenant_id, transaction_type, period_start])
  @@index([tenant_id, is_recurring, period_start])
  @@index([updated_at])
  @@map("financial_cube")
}
